{"gcms_tof_annotation":{"author":null,"declares":{"name":"gcms_tof_annotation","parameters":[{"name":"rawdir","text":null},{"name":"peaktable","text":null},{"name":"libtype","text":"[1, -1]"},{"name":"outputdir","text":"'.\/'"},{"name":"ppm.cutoff","text":"20"},{"name":"lib.files","text":"NULL"},{"name":"n.threads","text":"8"},{"name":"do.plot","text":"TRUE"},{"name":"debug","text":"FALSE"}],"sourceMap":{"File":"gcms_tof.R","Line":"3","Method":{"Method":"gcms_tof_annotation","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"gcms_tof_annotation"},"make_annotation":{"author":null,"declares":{"name":"make_annotation","parameters":[{"name":"files","text":null},{"name":"peakfile","text":null},{"name":"libtype","text":"[1, -1]"},{"name":"ms1ppm","text":"15"},{"name":"export.dir","text":"'.\/'"},{"name":"library.dir","text":"NULL"},{"name":"n.threads","text":"8"},{"name":"waters","text":"FALSE"},{"name":"metadna","text":"TRUE"},{"name":"do.plot","text":"TRUE"},{"name":"id.range","text":"NULL"},{"name":"debug","text":"FALSE"}],"sourceMap":{"File":"main.R","Line":"17","Method":{"Method":"make_annotation","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"the input raw data files could be in data formats of: 1. open source: mzXML, mzML 2. panomix mzkit format: mzPack, PeakMs2","examples":"","keywords":[],"parameters":[{"name":"peakfile","text":"the file path to the xcms peaktable file."},{"name":"libtype","text":"the ion polarity mode of the rawdata files, should be an integer vector of 1 for positive and -1 for negative raw data."},{"name":"export_dir","text":"a character vector of the directory path for output the annotation result files."},{"name":"n_threads","text":"the number of the cpu threads for run for the parallel compute."}],"returns":null,"see_also":"","title":"Run metabolite annotation search"},"dasy_task":{"author":null,"declares":{"name":"dasy_task","parameters":[{"name":"file","text":null},{"name":"args","text":"'list'('export_dir' = '.\/', 'peakfile' = '.\/peaksdata.csv', 'library_dir' = NULL, 'ms1_da' = 0.1, 'rt_winsize' = 10, 'libtype' = 1, 'ms1ppm' = 15, 'waters' = FALSE, 'metadna' = TRUE)"}],"sourceMap":{"File":"parallel.R","Line":"7","Method":{"Method":"dasy_task","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"","keywords":[],"parameters":[{"name":"args","text":"the workflow arguments for run this annotation."}],"returns":null,"see_also":"","title":"A annotation task for a single rawdata file"},".onLoad":{"author":null,"declares":{"name":".onLoad","parameters":[],"sourceMap":{"File":"zzz.R","Line":"1","Method":{"Method":".onLoad","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":".onLoad"},"__load_gcms_libs":{"author":null,"declares":{"name":"__load_gcms_libs","parameters":[{"name":"argv","text":"'list'('libfiles' = NULL, 'libtype' = [1, -1])"}],"sourceMap":{"File":"gcms.R","Line":"1","Method":{"Method":"__load_gcms_libs","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"__load_gcms_libs"},"__load_lcms_libs":{"author":null,"declares":{"name":"__load_lcms_libs","parameters":[{"name":"argv","text":"'list'('libfiles' = NULL, 'libtype' = [1, -1], 'waters' = FALSE)"},{"name":"load.spectrum","text":"TRUE"},{"name":"map.name","text":"NULL"},{"name":"target.idset","text":"NULL"}],"sourceMap":{"File":"lcms.R","Line":"8","Method":{"Method":"__load_lcms_libs","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"","keywords":[],"parameters":[],"returns":null,"see_also":"","title":"load lcms library database"},"open_biocad_local":{"author":null,"declares":{"name":"open_biocad_local","parameters":[],"sourceMap":{"File":"local_biocad.R","Line":"6","Method":{"Method":"open_biocad_local","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"","keywords":[],"parameters":[],"returns":null,"see_also":"","title":"Open local annotation library file"},"open_local_gcms_EI":{"author":null,"declares":{"name":"open_local_gcms_EI","parameters":[],"sourceMap":{"File":"local_biocad.R","Line":"15","Method":{"Method":"open_local_gcms_EI","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"open_local_gcms_EI"},"local_gcms_lib":{"author":null,"declares":{"name":"local_gcms_lib","parameters":[],"sourceMap":{"File":"local_biocad.R","Line":"24","Method":{"Method":"local_gcms_lib","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"local_gcms_lib"},"gcms_mona_msp":{"author":null,"declares":{"name":"gcms_mona_msp","parameters":[{"name":"mspfile","text":null},{"name":"libtype","text":"[1, -1]"}],"sourceMap":{"File":"mona.R","Line":"8","Method":{"Method":"gcms_mona_msp","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"","keywords":[],"parameters":[],"returns":"a cluster tree of the reference spectrum for make spectrum similarity search.","see_also":"","title":"load gcms library in mona msp file format"},"build_cfmid3_library":{"author":null,"declares":{"name":"build_cfmid3_library","parameters":[{"name":"cfmid","text":null},{"name":"libfile","text":null}],"sourceMap":{"File":"build_cfmid3_library.R","Line":"37","Method":{"Method":"build_cfmid3_library","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"\\dontrun{ build_cfmid3_library( cfmid = \"path\/to\/cfm_id_outputs\", libfile = \"reference_library.spa\" )}","keywords":[],"parameters":[{"name":"cfmid","text":"Character string specifying the directory path containing CFM-ID 3.0 output files. Files must be in TXT format with predicted spectra."},{"name":"libfile","text":"Character string defining the output file path for the compiled spectral library. Recommended file extension is `.spa` for compatibility with `mzkit` packages."}],"returns":"None (invisible `NULL`). The function's primary output is a binary library file saved at the location specified by `libfile`.","see_also":"","title":"Build Reference Spectrum Library from CFM-ID 3.0 Outputs"},"parse_cfmid4_predicts":{"author":null,"declares":{"name":"parse_cfmid4_predicts","parameters":[{"name":"str.output","text":null}],"sourceMap":{"File":"cfmid4.R","Line":"24","Method":{"Method":"parse_cfmid4_predicts","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"Output structure must contain: 1. Metadata lines starting with \"#\" at beginning 2. Spectrum data block (whitespace separated m\/z-intensity pairs) 3. Annotation block (whitespace separated m\/z-annotation pairs) The precursor mass (PMass) in metadata represents [M+H]+ or [M-H]- ion.","examples":"","keywords":[],"parameters":[{"name":"str_output","text":"Character string containing the full CFM-ID prediction output text."}],"returns":"A named list containing three components: \\itemize{ \\item \\code{metadata} - List of key-value pairs from the prediction metadata header \\item \\code{spectrum} - List of dataframes, each containing MS2 spectrum data for an energy level \\item \\code{annotation} - Dataframe containing peak annotations }","see_also":"","title":"Parse CFM-ID 4.0 spectral prediction output"},".parse_annotation4":{"author":null,"declares":{"name":".parse_annotation4","parameters":[{"name":"lines","text":null}],"sourceMap":{"File":"cfmid4.R","Line":"67","Method":{"Method":".parse_annotation4","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"Input lines should contain at least three whitespace-separated columns. Second column is parsed as m\/z, third column as annotation text.","examples":"","keywords":[],"parameters":[{"name":"lines","text":"Character vector where each element contains whitespace-separated values (expected format: peak_index, m\/z value, annotation text)."}],"returns":"Dataframe containing: \\itemize{ \\item \\code{mz} - Numeric vector of fragment m\/z values \\item \\code{peak_anno} - Character vector of corresponding peak annotations }","see_also":"","title":"Parse MS2 fragment annotations"},".parse_spectrum4":{"author":null,"declares":{"name":".parse_spectrum4","parameters":[{"name":"lines","text":null}],"sourceMap":{"File":"cfmid4.R","Line":"90","Method":{"Method":".parse_spectrum4","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"Energy headers must match the pattern \"energy\\\\d+\" (e.g., \"energy0\"). Blocks without valid headers will be ignored.","examples":"","keywords":[],"parameters":[{"name":"lines","text":"Character vector of spectrum data lines, with energy headers (\"energyX\") separating different collision energy blocks."}],"returns":"List of dataframes, each dataframe contains spectrum data for one collision energy level.","see_also":"","title":"Parse multi-energy spectra blocks"},".parse_metadata4":{"author":null,"declares":{"name":".parse_metadata4","parameters":[{"name":"lines","text":null}],"sourceMap":{"File":"cfmid4.R","Line":"116","Method":{"Method":".parse_metadata4","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"Performs automatic type conversion: \\itemize{ \\item Numeric values converted to numeric type \\item \"TRUE\/FALSE\" converted to logical \\item Other values remain as character strings }","examples":"","keywords":[],"parameters":[{"name":"lines","text":"Character vector of metadata lines (each starting with \"#\" prefix)"}],"returns":"Named list containing metadata parameters. Keys are derived from text before \"=\", values are converted to appropriate types.","see_also":"","title":"Parse metadata from header lines"},"parseMS":{"author":null,"declares":{"name":"parseMS","parameters":[{"name":"block","text":null}],"sourceMap":{"File":"parseMS.R","Line":"23","Method":{"Method":"parseMS","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"Each line in the input block should contain exactly two numeric values separated by whitespace. The first value is parsed as m\/z, the second as intensity. Non-numeric entries will result in NA values.","examples":"\\dontrun{ block <- c(\"100.0 500\", \"150.2 2500\") parseMS(block) }","keywords":[],"parameters":[{"name":"block","text":"Character vector where each element contains a pair of whitespace-separated numeric values (m\/z and intensity)."}],"returns":"A dataframe containing two columns: \\itemize{ \\item \\code{mz} - Numeric vector of fragment m\/z values \\item \\code{into} - Numeric vector of corresponding intensity values }","see_also":"","title":"Parse MS2 spectrum data from text block"},"cfmid4_task":{"author":null,"declares":{"name":"cfmid4_task","parameters":[{"name":"data","text":null},{"name":"save.sh","text":null},{"name":"save.dir","text":"'.\/'"},{"name":"image.id","text":"'wishartlab\/cfmid:latest'"}],"sourceMap":{"File":"task.R","Line":"50","Method":{"Method":"cfmid4_task","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"\\dontrun{ data <- data.frame(smiles = c(\"CCO\", \"CCN\"), row.names = c(\"ethanol\", \"ethylamine\")) cfmid4_task(data, save_sh = \"predictions.sh\", save_dir = \"~\/cfm_results\", image_id = \"my_cfmid_image:4.0\") }","keywords":[],"parameters":[{"name":"data","text":"A `dataframe` containing molecular structures and unique identifiers. Must include: - Row names: Unique molecule reference IDs (used as identifiers) - Column named `smiles`: Molecular structures in SMILES format"},{"name":"save_sh","text":"Path (string) to save the generated bash script. Example: \"\/scripts\/cfm_predictions.sh\""},{"name":"save_dir","text":"Output directory for prediction results (default: current directory). Will be normalized to absolute path. Directory structure follows: `save_dir\/.cfmid4\/hash1\/hash2\/molecule_id\/`"},{"name":"image_id","text":"Docker image ID for CFM-ID execution (default: \"wishartlab\/cfmid:latest\")"}],"returns":"No return value. Writes executable bash script to `save_sh`.","see_also":"","title":"Generate a parallel task bash script for running CFM-ID 4.0 predictions"},"build_mona_lcms":{"author":null,"declares":{"name":"build_mona_lcms","parameters":[{"name":"repo","text":null},{"name":"libdir","text":"'.\/MoNA'"},{"name":"metabolites","text":"NULL"}],"sourceMap":{"File":"build_mona_lcms.R","Line":"12","Method":{"Method":"build_mona_lcms","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"","keywords":[],"parameters":[{"name":"metabolites","text":"accept the metabolite annotation information and spectrum id mapping from external database source."}],"returns":null,"see_also":"","title":"build lcms reference library for MoNA LC-MS dataset"},"formula_annotation":{"author":null,"declares":{"name":"formula_annotation","parameters":[{"name":"peaks","text":null},{"name":"ms1ppm","text":"10"},{"name":"profiles","text":"'list'('C' = [1, 100], 'H' = [3, 200], 'O' = [0, 50], 'N' = [0, 50], 'S' = [0, 50], 'P' = [0, 50])"},{"name":"mass.range","text":"[50, 1200]"}],"sourceMap":{"File":"formula.R","Line":"4","Method":{"Method":"formula_annotation","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"","keywords":[],"parameters":[],"returns":null,"see_also":"","title":"formula_annotation"},"call_librarysearch":{"author":null,"declares":{"name":"call_librarysearch","parameters":[{"name":"peaks.ms2","text":null},{"name":"libfiles","text":"NULL"},{"name":"libtype","text":"[1, -1]"},{"name":"output","text":"'.\/'"},{"name":"waters","text":"FALSE"},{"name":"target.idset","text":"NULL"}],"sourceMap":{"File":"librarySearch.R","Line":"3","Method":{"Method":"call_librarysearch","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"call_librarysearch"},"resolve_metadb":{"author":null,"declares":{"name":"resolve_metadb","parameters":[{"name":"libfiles","text":"NULL"},{"name":"map.name","text":"NULL"}],"sourceMap":{"File":"librarySearch.R","Line":"32","Method":{"Method":"resolve_metadb","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"resolve_metadb"},"call_metadna":{"author":null,"declares":{"name":"call_metadna","parameters":[{"name":"peaks.ms2","text":null},{"name":"libtype","text":"[1, -1]"},{"name":"ms1ppm","text":"15"},{"name":"output","text":"'.\/'"}],"sourceMap":{"File":"metadna.R","Line":"9","Method":{"Method":"call_metadna","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"","keywords":[],"parameters":[],"returns":null,"see_also":"","title":"run metadna algorithm"},"peak_alignment":{"author":null,"declares":{"name":"peak_alignment","parameters":[{"name":"metadna","text":null},{"name":"peaktable","text":null},{"name":"mzdiff","text":"0.01"},{"name":"rt.win","text":"15"},{"name":"ms1ppm","text":"15"},{"name":"libtype","text":"[1, -1]"}],"sourceMap":{"File":"peak_alignment.R","Line":"5","Method":{"Method":"peak_alignment","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"","keywords":[],"parameters":[],"returns":null,"see_also":"","title":"make peak alignment of the ms2 annotation result with peaktable"},"get_adducts":{"author":null,"declares":{"name":"get_adducts","parameters":[{"name":"ionMode","text":"[1, -1]"}],"sourceMap":{"File":"precursors.R","Line":"3","Method":{"Method":"get_adducts","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"get_adducts"},"read_rawfile":{"author":null,"declares":{"name":"read_rawfile","parameters":[{"name":"file","text":null},{"name":"cache.enable","text":"TRUE"}],"sourceMap":{"File":"rawfile.R","Line":"5","Method":{"Method":"read_rawfile","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"","keywords":[],"parameters":[],"returns":null,"see_also":"","title":"rawdata lc-ms file processor"},"read_gcmsdata":{"author":null,"declares":{"name":"read_gcmsdata","parameters":[{"name":"rawfile","text":null},{"name":"peaktable","text":null}],"sourceMap":{"File":"rawfile.R","Line":"34","Method":{"Method":"read_gcmsdata","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"","keywords":[],"parameters":[],"returns":null,"see_also":"","title":"read gc-ms rawdata files"},"__gcms_file_annotation":{"author":null,"declares":{"name":"__gcms_file_annotation","parameters":[{"name":"filepath","text":null},{"name":"peaktable","text":null},{"name":"work.pars","text":null}],"sourceMap":{"File":"file_annotation.R","Line":"3","Method":{"Method":"__gcms_file_annotation","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"__gcms_file_annotation"},"__gcms_annotation":{"author":null,"declares":{"name":"__gcms_annotation","parameters":[{"name":"rawfile","text":null},{"name":"ions","text":null},{"name":"libname","text":null},{"name":"libs","text":null},{"name":"argv","text":null}],"sourceMap":{"File":"gcms_tof.R","Line":"5","Method":{"Method":"__gcms_annotation","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"__gcms_annotation"},"__merge_samples":{"author":null,"declares":{"name":"__merge_samples","parameters":[{"name":"results","text":null},{"name":"argv","text":null}],"sourceMap":{"File":"merge.R","Line":"3","Method":{"Method":"__merge_samples","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"__merge_samples"},"metadna_report":{"author":null,"declares":{"name":"metadna_report","parameters":[{"name":"metadna.result","text":null},{"name":"metadb","text":null},{"name":"args","text":null}],"sourceMap":{"File":"metadna_report.R","Line":"1","Method":{"Method":"metadna_report","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"metadna_report"},"make_msms_plot":{"author":null,"declares":{"name":"make_msms_plot","parameters":[{"name":"result","text":null},{"name":"visual.dir","text":"'.\/'"}],"sourceMap":{"File":"msms_plot.R","Line":"39","Method":{"Method":"make_msms_plot","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"# Example usage: result <- list( list( name = \"Compound1\", adducts = \"[M+H]+\", mz = 456.123, rt = 300, xcms_id = \"XCMS_001\", alignment = \"parsed_alignment_data\" ) ) make_msms_plot(result, visual_dir = \".\/output_plots\")","keywords":[],"parameters":[{"name":"result","text":"A list or data frame containing spectrum alignment results. Each element must include: - `name`: Compound identifier (character). - `adducts`: Adduct information (character or `NA`). - `mz`: Mass-to-charge ratio (numeric). - `rt`: Retention time in seconds (numeric). - `xcms_id`: Unique XCMS identifier (character or numeric). - `alignment`: Spectrum alignment data (list or string)."},{"name":"visual_dir","text":"Character string specifying the output directory for plot files. Defaults to the current working directory (`\".\/\"`)."}],"returns":"Invisibly returns `NULL`. The function primarily generates side effects by saving plot files to the specified directory. Files are named in the format: `{xcms_id}@{normalized_name}.svg\/png`.","see_also":"- `normalizeFileName()` for filename sanitization. - `parse.spectrum_alignment()` for alignment data parsing.","title":"Generate mirror plots for spectrum alignment results"},"export_report":{"author":null,"declares":{"name":"export_report","parameters":[{"name":"files","text":null},{"name":"export.dir","text":"'.\/'"},{"name":"do.plot","text":"TRUE"}],"sourceMap":{"File":"report.R","Line":"52","Method":{"Method":"export_report","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"\\dontrun{ # Basic usage export_report(files = c(\"sample1\", \"sample2\")) # Custom output directory export_report( files = list.dirs(\"raw_data\", recursive = FALSE), export_dir = \"processed_results\" )}","keywords":[],"parameters":[{"name":"files","text":"Character vector of file paths containing sample annotation results. Each path should point to a sample directory containing `result.csv`[2,6](@ref)."},{"name":"export_dir","text":"Output directory path for saving consolidated report and visualizations. Defaults to current working directory (`\".\/\"`)."}],"returns":"Invisibly returns `NULL`. Primary outputs are: - `export_dir\/annotation_result.csv`: Consolidated report table - `export_dir\/spectral_aligns\/*`: Spectrum alignment plots (SVG\/PNG)","see_also":"- [make_msms_plot()] for spectrum visualization details - [report_unique()] for uniqueness filtering logic","title":"Export Metabolomics Annotation Report with Spectrum Alignment Visuals"},"tabular_annotation":{"author":null,"declares":{"name":"tabular_annotation","parameters":[{"name":"result","text":null},{"name":"rt.shifts","text":"15"}],"sourceMap":{"File":"report.R","Line":"92","Method":{"Method":"tabular_annotation","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"tabular_annotation"},"tabular":{"author":null,"declares":{"name":"tabular","parameters":[{"name":"list","text":null},{"name":"keys","text":null}],"sourceMap":{"File":"tabular.R","Line":"33","Method":{"Method":"tabular","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"# Basic usage my_list <- list(name = c(\"Alice\", \"Bob\"), age = c(28, 32)) tabular(my_list, keys = c(\"name\", \"age\")) # Partial key mapping tabular(my_list, keys = \"name\")","keywords":["internal"],"parameters":[{"name":"list","text":"A named list containing the data to be converted. Each element should correspond to a column in the output data frame."},{"name":"keys","text":"Character vector specifying the names of list elements to extract as columns. Must match existing names in `list`."}],"returns":"A [data.frame] object where: - Column names correspond to `keys` - Each column contains values from `list` elements - Row count matches the length of list elements","see_also":"","title":"Convert named list to tabular data frame"},"union_posneg":{"author":null,"declares":{"name":"union_posneg","parameters":[{"name":"pos","text":null},{"name":"neg","text":null}],"sourceMap":{"File":"union_posneg.R","Line":"3","Method":{"Method":"union_posneg","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"union_posneg"},"report_unique":{"author":null,"declares":{"name":"report_unique","parameters":[{"name":"result","text":null}],"sourceMap":{"File":"unique.R","Line":"3","Method":{"Method":"report_unique","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"report_unique"},"rank_score":{"author":null,"declares":{"name":"rank_score","parameters":[{"name":"result","text":null}],"sourceMap":{"File":"unique.R","Line":"33","Method":{"Method":"rank_score","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"rank_score"},"deconv_peaks":{"author":null,"declares":{"name":"deconv_peaks","parameters":[{"name":"rawfiles","text":null},{"name":"workdir","text":"'.\/'"},{"name":"max.rtwin","text":"15"},{"name":"docker","text":"NULL"},{"name":"n.threads","text":"8"},{"name":"call.xcms","text":"TRUE"}],"sourceMap":{"File":"deconv_peaks.R","Line":"32","Method":{"Method":"deconv_peaks","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"The processing pipeline involves two main steps: \\enumerate{ \\item \\strong{XCMS Peak Detection:} When \\code{call_xcms = TRUE}, runs \\code{xcms_findPeaks()} in parallel batches using matchedFilter algorithm. \\item \\strong{Peak Alignment:} Aligns peaks across samples using specified RT window and outputs consolidated results. }","examples":"","keywords":[],"parameters":[{"name":"rawfiles","text":"Character vector of raw data files (mzXML or mzML format)."},{"name":"workdir","text":"Output directory for results (default: \".\/\")."},{"name":"max_rtwin","text":"Maximum retention time window (seconds) for peak alignment (default: 15)."},{"name":"docker","text":"Docker image ID for XCMS execution environment (optional)."},{"name":"n_threads","text":"Number of threads for parallel processing (default: 8)."},{"name":"call_xcms","text":"Logical indicating whether to run XCMS peak detection (default: TRUE). If FALSE, only alignment is performed using existing XCMS output."}],"returns":"Invisibly returns NULL. Outputs the following files in \\code{workdir}: \\itemize{ \\item \\strong{peaktable.csv} - Aligned peak feature table \\item \\strong{rt_shifts.csv} - Retention time shift corrections \\item \\strong{peakmeta.csv} - Peak metadata (mz, RT, intensity, etc.) \\item \\strong{rt_shifts.pdf} - Visualization of retention time shifts \\item \\strong{peakset.pdf} - Peak distribution visualization }","see_also":"\\code{\\link{xcms_findPeaks}}, \\code{\\link{__peak_alignment}}","title":"Perform peak detection and alignment for LC-MS\/GC-MS data"},"__peak_alignment":{"author":null,"declares":{"name":"__peak_alignment","parameters":[{"name":"xcms.out","text":null},{"name":"max.rtwin","text":"15"},{"name":"workdir","text":"'.\/'"}],"sourceMap":{"File":"deconv_peaks.R","Line":"95","Method":{"Method":"__peak_alignment","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"","keywords":["internal"],"parameters":[{"name":"xcms_out","text":"Directory containing XCMS peak CSV files."},{"name":"max_rtwin","text":"Maximum retention time window (seconds) for peak matching."},{"name":"workdir","text":"Output directory for generated files (default: \".\/\")."}],"returns":"Invisibly returns NULL. Generates: \\itemize{ \\item Consolidated peak table (peaktable.csv) \\item Retention time shift data (rt_shifts.csv) \\item Peak metadata (peakmeta.csv) \\item Diagnostic plots (rt_shifts.pdf, peakset.pdf) }","see_also":"","title":"(Internal) Perform peak alignment across samples"},"xcms_findPeaks":{"author":null,"declares":{"name":"xcms_findPeaks","parameters":[{"name":"raw.files","text":null},{"name":"workdir","text":"'.\/'"},{"name":"docker","text":"NULL"}],"sourceMap":{"File":"xcms.R","Line":"19","Method":{"Method":"xcms_findPeaks","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"Uses either: \\enumerate{ \\item Docker container execution (if \\code{docker} provided) \\item Native R environment via \\code{REnv::rlang_interop()} }","examples":"","keywords":[],"parameters":[{"name":"raw_files","text":"Character vector of raw data files (mzXML\/mzML format)."},{"name":"workdir","text":"Output directory for peak CSV files (default: \".\/\")."},{"name":"docker","text":"Docker image ID for execution environment (optional)."}],"returns":"Invisibly returns NULL. Outputs CSV peak files in \\code{workdir}, one per input file (named using original basename).","see_also":"","title":"Perform peak detection using XCMS"}}